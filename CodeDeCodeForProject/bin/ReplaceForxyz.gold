using gold.**
// -----------------------
// Silvia Takahashi
// UNIVERSIDAD DE LOS ANDES
//------------------------------
// 
//  
//  A finite state transducer that  decodes strings that were coded as follows:
//    Input:   xyz:W'#
//    where  x y and z are distinct
//        xyx in Aˆ3
//     W in A*
// Output:  xyz:X#
//  where X is obtained by replacing $ for all occurrences of xyz
// It checks to make sure that xyz does not appear in X.
//-----------------------
//   By default  the alphabet is A  = {'a', 't', 'c'}, it can be changed invoking the program with a string  of symbols. 
//   A  will contain all the the symbols in the parameter
//  
//  

var Alph

procedure main ( args : String [ ] ) begin

	if args.length = 0 then
		Alph := { 'a' , 'b' , 'c' , 'd' }
	else
		Alph := { args [ 0 ] . charAt ( i ) | 0 ≤ i < args [ 0 ] . length ( ) } \ { '$' , '#' }
	end

	deCoder := createTransducer ( Alph )
	print "Input strings of the form xyz:W#. with x, y, over " + Alph + "and W  over   " + Alph + "* (end with an empty string)" Utilities.test ( deCoder )
end

function cutString ( reading : String ) begin
	characters : char [ ] := reading.toCharArray ( ) len : Integer := 0 out : String := ""

	while len < 3 do
		out := out + Character.toString ( ( characters [ len ] ) ) len := len + 1
	end
	return out
end

function createTransducer ( A ) : ITransducer begin
	States := { "Start" , "Final" , "Error" } ∪ { ⟨ position , firstSet , secondSet ⟩ | position in { 0 , 1 } , firstSet in { "" + p + q + r + "!" | p ∈ A , q ∈ A , r ∈ A } ∪ { "Asterisk" , "Asterisk!" , Ø } , secondSet in { "" + p | p ∈ A } ∪ { "" + p + q | p ∈ A , q ∈ A } ∪ { "" + p + q + r | p ∈ A , q ∈ A , r ∈ A } ∪ { "" + p + q + r + "!" | p ∈ A , q ∈ A , r ∈ A } ∪ { "Asterisk" , "Asterisk!" } } InAlphabet := { 'a' , 'b' , 'c' , 'd' , '!' , '#' , '*' } OutAlphabet := { 'a' , 'b' , 'c' , 'd' , '!' , '#' } initState := "Start" finalStates := { "Final" }

	return GDeterministicTransducer ( States , InAlphabet , OutAlphabet , initState , finalStates , δ1 , h1 , g )
end

g
( x ) := ""

function δ1 ( q , σ ) begin
	s := { 'a' , 'b' , 'c' , 'd' }
	if q = "Start" and σ ∈ s then
		return ⟨ 1 , Ø , Character.toString ( σ ) ⟩
	elseif q = "Start" and Character.toString ( σ ) = "#" then
		return "Final"
	else
		return "Error"
	end
end

function δ1 ( ⟨ position , firstSet , secondSet ⟩ , reading ) begin
	s := { 'a' , 'b' , 'c' , 'd' }

	if | secondSet | = 1 and reading ∈ s then
		return ⟨ position , firstSet , secondSet + reading ⟩

	elseif | secondSet | = 2 and reading ∈ s then
		return ⟨ position , firstSet , secondSet + reading ⟩

	elseif | secondSet | = 3 and reading = '!' then

		if position = 0 and firstSet = secondSet + reading then
			return "Error"
		else
			return ⟨ position , firstSet , secondSet + reading ⟩
		end

	elseif | secondSet | = 3 and reading = '#' and position ≠ 1 then
		if position = 0 and firstSet = secondSet + "!" then
			return "Error"
		else
			return "Final"
		end

	elseif | secondSet | = 4 and reading ∈ s then
		return ⟨ ( position + 1 ) % 2 , secondSet , Character.toString ( reading ) ⟩
	elseif | secondSet | = 4 and reading = '*' and position ≠ 0 then
		return ⟨ ( position + 1 ) % 2 , secondSet , "Asterisk" ⟩
	elseif secondSet = "Asterisk" and reading = '!' then
		return ⟨ position , firstSet , "Asterisk!" ⟩
	elseif secondSet = "Asterisk" and reading = '#' and position ≠ 1 then
		return "Final"
	elseif secondSet = "Asterisk!" and reading ∈ s then
		return ⟨ ( position + 1 ) % 2 , secondSet , Character.toString ( reading ) ⟩
	else
		return "Error"
	end
end
function h1 ( state ) begin
	return λ
end

function h1 ( ⟨ position , firstSet , secondSet ⟩ ) begin
	return λ
end

function g ( state , reading ) begin
	if state = "Start" and Character.toString ( reading ) = "#" then
		return reading
	else
		return λ
	end
end

function g ( ⟨ position , firstSet , secondSet ⟩ , reading ) begin
	s := { 'a' , 'b' , 'c' , 'd' }
	if | secondSet | = 2 and reading ∈ s then
		return secondSet + reading
	elseif | secondSet | = 3 and reading = '!' then
		return reading
	elseif | secondSet | = 3 and reading = '#' then
		return reading
	elseif | secondSet | = 4 and reading = '*' then
		return cutString ( secondSet )
	elseif secondSet = "Asterisk" and reading = '!' then
		return reading
	elseif secondSet = "Asterisk" and reading = '#' then
		return reading
	else
		return λ
	end
end